import threading

# Example matrices
A = [
    [1, 2],
    [3, 4]
]

B = [
    [5, 6],
    [7, 8]
]

# Result matrix initialized to 0
result = [[0 for _ in range(len(B[0]))] for _ in range(len(A))]

# Thread return values stored here
thread_results = {}

# Define a thread function
def compute_element(i, j, tid):
    sum_value = 0
    for k in range(len(B)):
        sum_value += A[i][k] * B[k][j]
    thread_results[tid] = (i, j, sum_value)  # Simulate pthread_exit by storing result

def main():
    threads = []
    tid = 0  # thread ID to map results

    print("Starting matrix multiplication using threads...")

    for i in range(len(A)):
        for j in range(len(B[0])):
            t = threading.Thread(target=compute_element, args=(i, j, tid))
            threads.append((t, tid))
            t.start()
            tid += 1

    # Join threads and collect results
    for t, thread_id in threads:
        t.join()
        i, j, value = thread_results[thread_id]
        result[i][j] = value  # Main thread stores the value

    print("\nResultant Matrix:")
    for row in result:
        print(row)

if __name__ == "__main__":
    main()
