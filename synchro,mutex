import threading
import time
import random

buffer = []
BUFFER_SIZE = 5

empty = threading.Semaphore(BUFFER_SIZE)
full = threading.Semaphore(0)
mutex = threading.Lock()

MAX_ITEMS = 10  # produce and consume 10 items, then stop

def producer():
    for _ in range(MAX_ITEMS):
        item = random.randint(1, 100)
        empty.acquire()
        mutex.acquire()
        buffer.append(item)
        print(f"Produced: {item} | Buffer: {buffer}")
        mutex.release()
        full.release()
        time.sleep(random.uniform(0.5, 1.5))

def consumer():
    for _ in range(MAX_ITEMS):
        full.acquire()
        mutex.acquire()
        item = buffer.pop(0)
        print(f"Consumed: {item} | Buffer: {buffer}")
        mutex.release()
        empty.release()
        time.sleep(random.uniform(0.5, 1.5))


prod_thread = threading.Thread(target=producer)
cons_thread = threading.Thread(target=consumer)

prod_thread.start()
cons_thread.start()
